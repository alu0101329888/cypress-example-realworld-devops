version: 2.1

jobs:
  build:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - run:
          name: Update and install
          command: |
            sudo apt update && sudo apt install -y openconnect curl ca-certificates iputils-ping traceroute net-tools dnsutils

      - run:
          name: Start VPN Connection as a Background Service
          background: true
          command: |
            echo "Iniciando servicio VPN en segundo plano..."
            echo "${VPN_PASSWORD}" | sudo openconnect --protocol=gp --user=${VPN_USER} --passwd-on-stdin vpn.ull.es

      - run:
          name: Wait for VPN and configure routing
          command: |
            echo "Esperando a que la conexión VPN se establezca..."
            timeout=0
            while ! ip a show tun0 &>/dev/null && [ $timeout -lt 60 ]; do
               echo "Esperando conexión VPN..."
               sleep 1
               timeout=$((timeout+1))
            done
            if [ $timeout -ge 60 ]; then
              echo "No se pudo conectar a la VPN en 60 segundos."
              exit 1
            fi

            # Información de la VPN conectada
            echo "### VPN conectada ###"
            ip a show tun0

            # Obtener IP pública
            echo "### IP pública actual ###"
            curl -s http://checkip.amazonaws.com

            # Información de enrutamiento antes de cambios
            echo "### Tabla de enrutamiento actual ###"
            ip route

            # Solución 1: Añadir ruta específica para la red de Kubernetes
            echo "### Añadiendo ruta específica para la red de Kubernetes ###"
            # Esta subred específica cubre todo el rango de tu clúster (10.6.128.0/22)
            sudo ip route add 10.6.128.0/22 dev tun0

            # Ver cambios de rutas
            echo "### Tabla de enrutamiento actualizada ###"
            ip route

            # Test de conectividad básica
            echo "### Prueba de ping al balanceador de Kubernetes ###"
            ping -c 3 10.6.129.134 || echo "Ping falló, pero continuando..."

            # Test de conectividad TCP al puerto de la API de Kubernetes
            echo "### Prueba de conexión TCP al puerto de la API de Kubernetes ###"
            timeout 5 bash -c "</dev/tcp/10.6.129.134/6443" && echo "Conexión TCP exitosa" || echo "Conexión TCP fallida"

            # Traceroute para diagnóstico
            echo "### Traceroute a la API de Kubernetes ###"
            traceroute -T -p 6443 10.6.129.134 || echo "Traceroute falló"

      - run:
          name: Configure Kubernetes
          command: |
            mkdir -p $HOME/.kube
            echo "$KUBECONFIG_DATA" | base64 -d > $HOME/.kube/config
            chmod 600 $HOME/.kube/config

            # Ver información del kubeconfig
            echo "### Información del kubeconfig ###"
            kubectl config view --minify | grep -v "client-certificate\|client-key\|token:"

            # Ver resolución DNS
            echo "### Resolución DNS del servidor API ###"
            KUBE_API_SERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}' | cut -d/ -f3 | cut -d: -f1)
            echo "Servidor API: $KUBE_API_SERVER"

            # Verificar configuración del contexto actual
            echo "### Contexto actual ###"
            kubectl config current-context

            # Si la configuración de DNS está fallando, aquí verificamos el archivo /etc/hosts
            echo "### Añadiendo entrada en /etc/hosts si es necesario ###"
            if [[ "$KUBE_API_SERVER" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "La API está configurada con IP directa: $KUBE_API_SERVER"
            else
              echo "La API está configurada con nombre DNS: $KUBE_API_SERVER"
              echo "Añadiendo $KUBE_API_SERVER a /etc/hosts"
              echo "10.6.129.134 $KUBE_API_SERVER" | sudo tee -a /etc/hosts
            fi

      - run:
          name: Connect to Kubernetes with Debug
          command: |
            echo "### Intentando conectar al clúster de Kubernetes con debug verboso ###"
            # Intento con timeout extendido y nivel de verbosidad máximo para diagnóstico
            kubectl --v=9 --request-timeout=60s get nodes || true
            # Intento con curl directo al API server para verificar si es un problema de kubectl o de red
            echo "### Prueba directa con curl al API server ###"
            API_SERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
            echo "Probando conexión directa a $API_SERVER/healthz"
            curl -k -v $API_SERVER/healthz
            # Intento final con kubectl normal
            echo "### Intento final con kubectl ###"
            kubectl get nodes

      - run:
          name: Disconnect from VPN
          command: |
            echo "Desconectando VPN..."
            sudo pkill --signal SIGINT openconnect || true
            echo "VPN desconectada"
          when: always
