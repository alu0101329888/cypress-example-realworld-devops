version: 2.1

orbs:
  cypress: cypress-io/cypress@3
  kubernetes: circleci/kubernetes@1.3

jobs:
  build:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout

      # Instalar dependencias
      - run:
          name: Instalar dependencias
          command: |
            sudo apt update && sudo apt install -y openconnect curl ca-certificates
            curl -fsSL https://get.docker.com | sudo sh
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

      # Conectar a la VPN
      - run:
          name: Conectar a la VPN
          command: |
            echo "Conectando a VPN..."
            echo "${VPN_PASSWORD}" | sudo openconnect --protocol=gp --user=${VPN_USER} --passwd-on-stdin vpn.ull.es &
            timeout=0
            while ! ip a show tun0 &>/dev/null && [ $timeout -lt 60 ]; do
              echo "Esperando conexi칩n VPN..."
              sleep 1
              timeout=$((timeout+1))
            done
            if [ $timeout -ge 60 ]; then
              echo "No se pudo conectar a la VPN en 60 segundos."
              exit 1
            fi
            echo "VPN conectada"

      # Instalar kubectl y configurar acceso al cluster
      - run:
          name: Instalar kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      # Configurar kubeconfig
      - run:
          name: Configurar kubeconfig
          command: |
            mkdir -p $HOME/.kube
            echo "$KUBECONFIG_DATA" | base64 -d > $HOME/.kube/config
            chmod 600 $HOME/.kube/config
            kubectl get nodes

      # Construir im치genes
      - run:
          name: Construir im치genes Docker
          command: |
            cd client
            docker build -t $DOCKER_USERNAME/conduit-client:$CIRCLE_SHA1 .
            cd ../server
            docker build -t $DOCKER_USERNAME/conduit-server:$CIRCLE_SHA1 .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push $DOCKER_USERNAME/conduit-client:$CIRCLE_SHA1
            docker push $DOCKER_USERNAME/conduit-server:$CIRCLE_SHA1

      # Desplegar en K8s
      - kubernetes/install-kubectl
      - run:
          name: Desplegar en Kubernetes
          command: |
            # Crear archivo de configuraci칩n para el despliegue
            cat > kubernetes-deployment.yaml << EOL
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: conduit-server
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: conduit-server
              template:
                metadata:
                  labels:
                    app: conduit-server
                spec:
                  containers:
                  - name: server
                    image: $DOCKER_USERNAME/conduit-server:$CIRCLE_SHA1
                    ports:
                    - containerPort: 3000
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: conduit-server
            spec:
              selector:
                app: conduit-server
              ports:
              - port: 3000
                targetPort: 3000
              type: ClusterIP
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: conduit-client
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: conduit-client
              template:
                metadata:
                  labels:
                    app: conduit-client
                spec:
                  containers:
                  - name: client
                    image: $DOCKER_USERNAME/conduit-client:$CIRCLE_SHA1
                    ports:
                    - containerPort: 4100
                    env:
                    - name: API_URL
                      value: http://conduit-server:3000/api
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: conduit-client
            spec:
              selector:
                app: conduit-client
              ports:
              - port: 80
                targetPort: 4100
              type: LoadBalancer
            EOL

            kubectl apply -f kubernetes-deployment.yaml

      # Desconectar VPN
      - run:
          name: Desconectar VPN
          command: |
            sudo pkill --signal SIGINT openconnect || true
          when: always

  cypress-tests:
    docker:
      - image: cimg/node:18.12
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: |
            cd client
            npm install
            cd ../server
            npm install
      - run:
          name: Iniciar el servidor y ejecutar pruebas de Cypress
          command: |
            cd server
            npm start &
            cd ../client
            npm start &
            cd ..
            npx cypress run

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - cypress-tests
      - build:
          requires:
            - cypress-tests
          filters:
            branches:
              only: main
